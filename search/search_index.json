{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyRegexBuilder","text":"<p>Build regular expressions swiftly in Python.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>\ud83e\udde9 Simple yet powerful DSL: PyRegexBuilder allows you to build regular expressions using a DSL similar to that of Swift RegexBuilder. This makes it easier to compose and maintain regexes while still harnessing their many features.</p> <pre><code>from pyregexbuilder import Character, Regex, Capture, ZeroOrMore, OneOrMore\nimport regex as re\n\nword = OneOrMore(Character.WORD)\nemail_pattern = Regex(\n    Capture(\n        ZeroOrMore(\n            word,\n            \".\",\n        ),\n        word,\n    ),\n    \"@\",\n    Capture(\n        word,\n        OneOrMore(\n            \".\",\n            word,\n        ),\n    ),\n).compile()\n\ntext = \"My email is my.name@example.com.\"\n\nif match := re.search(email_pattern, text):\n    name, domain = match.groups()\n</code></pre> </li> <li> <p>\ud83d\udd0e Extensive regular expression support: PyRegexBuilder is made possible thanks to the feature-rich regex module.</p> <p>Danger</p> <ul> <li>\ud83d\udee0\ufe0f This is still a work in progress, and the API may change.</li> <li>\ud83d\udc1b If you find a bug or have a suggestion, please open an issue or pull request.</li> </ul> </li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<ol> <li> <p>Install PyRegexBuilder and the Regex library in a virtual environment using your favourite package manager.</p> pipuv <pre><code>pip install git+https//github.com/jsquaredosquared/PyRegexBuilder regex\n</code></pre> <pre><code>uv add \"pyregexbuilder @ git+https://github.com/jsquaredosquared/PyRegexBuilder\" regex\n</code></pre> <code>regex</code> or <code>re</code>? <ul> <li>PyRegexBuilder uses the <code>regex</code> module under the hood, with <code>regex.DEFAULT_VERSION = re.V1</code>. This is required if you want to use all the features.</li> <li>You can use <code>regex</code> with <code>regex.DEFAULT_VERSION = re.V0</code> or the built-in <code>re</code> module if you really want to, but some features may not work as expected.</li> </ul> </li> <li> <p>Compose regular expressions.</p> <pre><code>from pyregexbuilder import *\nimport regex as re\n\ntext = ... # This is the text that you want to use.\n\npattern = Regex(\n    # Build up your pattern here.\n    # Don't forget to compile it!\n).compile()\n\n\n# Now you can use the pattern in regex operations.\nresult = re.search(pattern, text)\n</code></pre> <p>Tip</p> <ul> <li>Strings that begin and end with forward slashes (<code>r\"/.../\"</code>) will be treated as regex literals.</li> <li>All other strings will be escaped with <code>re.escape()</code>.</li> </ul> </li> </ol> <p>See the tutorial for an example of how to use PyRegexBuilder.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>This documentation assumes familiarity with regex features.</p> <ul> <li>To learn how to use regular expressions in Python, see the docs and how-to.</li> <li>To see which additional features are provided by the <code>regex</code> module, see the regex GitHub page.</li> <li>To see all the features PyRegexBuilder has to offer, check out the API reference. The API is inspired by Swift RegexBuilder and TS Regex Builder.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>See this page.</p>"},{"location":"#see-also","title":"See also","text":"<ul> <li>TS Regex Builder (also based on Swift RegexBuilder)</li> <li>Edify (based on Super Expressive)</li> <li>Humre</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#set-up-environment","title":"Set up environment","text":"<p>...</p>"},{"location":"contributing/#set-up-documentation","title":"Set up documentation","text":"<p>...</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Here is a demo to showcase the use of PyRegexBuilder.</p>"},{"location":"tutorial/#problem","title":"Problem","text":"<p>Hidden in the <code>text</code> below is a Cyrillic letter that is preceded by exactly 2 Greek or Latin letters (no more, no less).</p> <pre><code>text = \"\u30a6\u062b\u30a4\u0627\u6708\u03b5\u0417\u4eba\u6c34\u062c\u0418\u5c71\u03b3\u05d1\u0418\u0416\u3131\u062a\u05d0E\u30a4\u0416\u05d1\u0418B\u0414E\u4eba\u062c\u062c\u30a4E\u3137\u062c\u0627\u062c\u3137\u30a2\u0417\u0627\u062c\u0627\u3134AC\u3134DA\u30a8\u03b2\u30a8\u0416\u05d0\u05d2\u6708\u6c34\u6c34\u3139\u062cA\u3141D\u0628\u30a8\u03b1\u5c71\u05d4\u0628\u062a\u30a6\u0418\u05d2\u6708A\u0627\u30a4\u0628\u5c71\u03b1\u062b\u3134\u0627\u0418\u03b4\u3139\u6c34\u30a2\u4eba\u3139\u062a\u03b5\u05d3\u03b2E\u5c71\u3134\u05d1\u3141E\u05d0\u0419\u30a8\u3137\u5c71\u05d0\u0628\u0627\u03b3\u062c\u30a6\u3139\u062b\u3141E\u0417\u0418\u65e5\u5c71\u30a4\u65e5\u062b\u0627\u3137\u03b2BA\u3141\u0416\u6c34\u3141\u5c71\u65e5\u6c34\u3141\u4eba\u0418\u30aa\u05d1\u3134\u03b3\u05d1\u6708\u062a\u6708\u0627\u03b2\u30a2\u05d4\u03b3\u0628\u03b2\u3131\u0628\u0418\u3131\u0628\u30aa\u062a\u3141\u30a8\u6c34\u03b1E\u062a\u3137A\u30a2\u05d3\u3131\u0628\u05d3D\u05d3\u3131\u30a8\u3139\u6c34\u062b\u0414\u5c71\u3131\u0628\u0627\u30a4\u03b2\u0627\u30a4\u6c34\u03b4\u3139\u0417\u3139\u6708\u03b3B\u5c71\u0417A\u30a2\u30a4\u03b1E\u0418\u0628\u0414\u062c\u0416\u03b5\u062a\u0418\u03b3\u3141\u05d0\u0627\u30aa\u3137D\u0419\u30a2E\u03b5\u30a4\u3139A\u062b\u0416\u05d3D\u65e5\u5c71\u65e5\u03b4\u03b4D\u0418C\u0628\u6708\u0417\u05d1\u03b1\u062a\u03b3\u30a6\u0416\u05d3\u0628\u062c\u65e5\u05d2B\u0628\u05d4\u30a4\u3131\u3141\u6708\u6708\u6708\u0416\u062cB\u3131\u05d2\u30a8\u05d1\u0414\u062c\u05d1\u3131\u3141\u3131\u4eba\"\n</code></pre> <p>Which letter is it? Can you find it using a regular expression?</p>"},{"location":"tutorial/#solution","title":"Solution","text":"<p>Let's see how we would go about coming up with a solution using PyRegexBuilder.</p> <ol> <li> <p>Import the required modules.</p> <pre><code>from pyregexbuilder import *\nimport regex as re\n</code></pre> </li> <li> <p>Create a character set that will match Greek or Latin letters.</p> <pre><code>greek_or_latin = PosixClass(\"IsGreek\").union(UnicodeClass(\"IsLatin\"))\n</code></pre> <p>See the available character classes.</p> </li> <li> <p>Now let's start constructing the regular expression.</p> <pre><code>greek_or_latin = PosixClass(\"IsGreek\").union(UnicodeClass(\"IsLatin\"))\n\nexpression = (\n    Regex(\n        ...\n    )\n)\n</code></pre> </li> <li> <p>Create an assertion to check that only the previous 2 characters are Greek or Latin letters.</p> <pre><code>greek_or_latin = PosixClass(\"IsGreek\").union(UnicodeClass(\"IsLatin\"))\n\nexpression = (\n    Regex(\n        PositiveLookbehind(\n            greek_or_latin.inverted,\n            Repeat(greek_or_latin, count=2)\n        )\n    )\n)\n</code></pre> <p>See the available assertions and quantifiers.</p> </li> <li> <p>After looking behind, capture the current letter if it is part of the Cyrillic alphabet.</p> <pre><code>greek_or_latin = PosixClass(\"IsGreek\").union(UnicodeClass(\"IsLatin\"))\n\nexpression = (\n    Regex(\n        PositiveLookbehind(\n            ...\n        ),\n        Capture(PosixClass(\"IsCyrillic\"), name=\"character\"),\n    )\n)\n</code></pre> <p>Groups can be named unnamed. See the available groups.</p> </li> <li> <p>Set the flags for the regular expression and compile.</p> <p>(Here, these flags are not necessary; they are just an example.)</p> <pre><code>greek_or_latin = PosixClass(\"IsGreek\").union(UnicodeClass(\"IsLatin\"))\n\nexpression = (\n    Regex(\n        ...\n    )\n    .with_flags({\"IGNORECASE\": True})\n    .with_global_flags({\"VERSION1\": True})\n    .compile()\n)\n</code></pre> <p>See the available scoped and global flags here.</p> </li> <li> <p>Now you can use the regular expression. Here is the full code:</p> <pre><code>from pyregexbuilder import *\nimport regex as re\n\ntext = \"\u30a6\u062b\u30a4\u0627\u6708\u03b5\u0417\u4eba\u6c34\u062c\u0418\u5c71\u03b3\u05d1\u0418\u0416\u3131\u062a\u05d0E\u30a4\u0416\u05d1\u0418B\u0414E\u4eba\u062c\u062c\u30a4E\u3137\u062c\u0627\u062c\u3137\u30a2\u0417\u0627\u062c\u0627\u3134AC\u3134DA\u30a8\u03b2\u30a8\u0416\u05d0\u05d2\u6708\u6c34\u6c34\u3139\u062cA\u3141D\u0628\u30a8\u03b1\u5c71\u05d4\u0628\u062a\u30a6\u0418\u05d2\u6708A\u0627\u30a4\u0628\u5c71\u03b1\u062b\u3134\u0627\u0418\u03b4\u3139\u6c34\u30a2\u4eba\u3139\u062a\u03b5\u05d3\u03b2E\u5c71\u3134\u05d1\u3141E\u05d0\u0419\u30a8\u3137\u5c71\u05d0\u0628\u0627\u03b3\u062c\u30a6\u3139\u062b\u3141E\u0417\u0418\u65e5\u5c71\u30a4\u65e5\u062b\u0627\u3137\u03b2BA\u3141\u0416\u6c34\u3141\u5c71\u65e5\u6c34\u3141\u4eba\u0418\u30aa\u05d1\u3134\u03b3\u05d1\u6708\u062a\u6708\u0627\u03b2\u30a2\u05d4\u03b3\u0628\u03b2\u3131\u0628\u0418\u3131\u0628\u30aa\u062a\u3141\u30a8\u6c34\u03b1E\u062a\u3137A\u30a2\u05d3\u3131\u0628\u05d3D\u05d3\u3131\u30a8\u3139\u6c34\u062b\u0414\u5c71\u3131\u0628\u0627\u30a4\u03b2\u0627\u30a4\u6c34\u03b4\u3139\u0417\u3139\u6708\u03b3B\u5c71\u0417A\u30a2\u30a4\u03b1E\u0418\u0628\u0414\u062c\u0416\u03b5\u062a\u0418\u03b3\u3141\u05d0\u0627\u30aa\u3137D\u0419\u30a2E\u03b5\u30a4\u3139A\u062b\u0416\u05d3D\u65e5\u5c71\u65e5\u03b4\u03b4D\u0418C\u0628\u6708\u0417\u05d1\u03b1\u062a\u03b3\u30a6\u0416\u05d3\u0628\u062c\u65e5\u05d2B\u0628\u05d4\u30a4\u3131\u3141\u6708\u6708\u6708\u0416\u062cB\u3131\u05d2\u30a8\u05d1\u0414\u062c\u05d1\u3131\u3141\u3131\u4eba\"\n\ngreek_or_latin = PosixClass(\"IsGreek\").union(UnicodeClass(\"IsLatin\"))\n\nexpression = (\n    Regex(\n        PositiveLookbehind(\n            greek_or_latin.inverted,\n            Repeat(\n                greek_or_latin,\n                count=2,\n            )\n        ),\n        Capture(PosixClass(\"IsCyrillic\"), name=\"character\"),\n    )\n    .with_flags({\"IGNORECASE\": True})\n    .with_global_flags({\"VERSION1\": True})\n    .compile()\n)\n\nmatch = re.search(expression, text)\n\nprint(match)\n</code></pre> </li> </ol>"},{"location":"api-reference/assertions/","title":"Assertions","text":""},{"location":"api-reference/assertions/#pyregexbuilder.assertions.Lookahead","title":"<code>Lookahead</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Creates a lookahead assertion.</p> <p>Regex: <code>(?=...)</code></p> Source code in <code>src/pyregexbuilder/assertions.py</code> <pre><code>class Lookahead(RegexComponent):\n    \"\"\"\n    Creates a lookahead assertion.\n\n    Regex: `(?=...)`\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = rf\"(?={self.parse(*components)})\"\n</code></pre>"},{"location":"api-reference/assertions/#pyregexbuilder.assertions.NegativeLookahead","title":"<code>NegativeLookahead</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Creates a negative lookahead assertion.</p> <p>Regex: <code>(?!...)</code></p> Source code in <code>src/pyregexbuilder/assertions.py</code> <pre><code>class NegativeLookahead(RegexComponent):\n    \"\"\"\n    Creates a negative lookahead assertion.\n\n    Regex: `(?!...)`\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = rf\"(?!{self.parse(*components)})\"\n</code></pre>"},{"location":"api-reference/assertions/#pyregexbuilder.assertions.NegativeLookbehind","title":"<code>NegativeLookbehind</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Creates a negative lookbehind assertion.</p> <p>Regex: <code>(?&lt;!...)</code></p> Source code in <code>src/pyregexbuilder/assertions.py</code> <pre><code>class NegativeLookbehind(RegexComponent):\n    \"\"\"\n    Creates a negative lookbehind assertion.\n\n    Regex: `(?&lt;!...)`\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = rf\"(?&lt;!{self.parse(*components)})\"\n</code></pre>"},{"location":"api-reference/assertions/#pyregexbuilder.assertions.PositiveLookbehind","title":"<code>PositiveLookbehind</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Creates a positive lookbehind assertion.</p> <p>Regex: <code>(?&lt;=...)</code></p> Source code in <code>src/pyregexbuilder/assertions.py</code> <pre><code>class PositiveLookbehind(RegexComponent):\n    \"\"\"\n    Creates a positive lookbehind assertion.\n\n    Regex: `(?&lt;=...)`\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = rf\"(?&lt;={self.parse(*components)})\"\n</code></pre>"},{"location":"api-reference/character-classes/","title":"Character classes","text":"<p>See:</p> <ul> <li>POSIX character classes</li> <li>Unicode codepoint properties</li> </ul>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.Anchor","title":"<code>Anchor</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Static constants defining useful anchors.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class Anchor(RegexComponent):\n    \"\"\"\n    Static constants defining useful anchors.\n    \"\"\"\n\n    START_OF_STRING = r\"/^/\"\n    END_OF_STRING = r\"/$/\"\n    WORD_BOUNDARY = r\"/\\b/\"\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.Character","title":"<code>Character</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Static constants defining useful characters.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class Character(RegexComponent):\n    \"\"\"\n    Static constants defining useful characters.\n    \"\"\"\n\n    ANY = r\"/./\"\n    DIGIT = r\"/\\d/\"\n    NOT_DIGIT = r\"/\\D/\"\n    WHITESPACE = r\"/\\s/\"\n    NOT_WHITESPACE = r\"/\\S/\"\n    WORD = r\"/\\w/\"\n    NOT_WORD = r\"/\\W/\"\n    GRAPHEME = r\"/\\X/\"\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.CharacterClass","title":"<code>CharacterClass</code>","text":"<p>               Bases: <code>SupportsBracketExpression</code></p> <p>Creates a general character class.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class CharacterClass(SupportsBracketExpression):\n    \"\"\"\n    Creates a general character class.\n    \"\"\"\n\n    def __init__(self, *character_set: \"str | SupportsBracketExpression\") -&gt; None:\n        str_args = filter(lambda s: isinstance(s, str), character_set)\n        if any(not re.match(r\"^/\\[.*\\]/$\", arg) for arg in str_args):\n            raise RegexBuilderException(\n                \"Strings passed to `CharacterClass` must be regex literals \"\n                \"that create character classes (e.g., '/[A-Z]/'). \"\n                \"To create a character class that matches A, -, and Z, \"\n                \"use `CharacterClass.any_of('A-Z')`.\"\n            )\n\n        char_sets = [self.parse(component) for component in character_set]\n\n        self._regex = rf\"[{'||'.join(char_sets)}]\"\n\n    @staticmethod\n    def any_of(character_sequence: Sequence) -&gt; \"CharacterClass\":\n        \"\"\"\n        Returns a character class that matches any of the characters in a sequence.\n        \"\"\"\n        return CharacterClass(rf\"/[{re.escape(''.join(character_sequence))}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.CharacterClass.any_of","title":"<code>any_of(character_sequence)</code>  <code>staticmethod</code>","text":"<p>Returns a character class that matches any of the characters in a sequence.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>@staticmethod\ndef any_of(character_sequence: Sequence) -&gt; \"CharacterClass\":\n    \"\"\"\n    Returns a character class that matches any of the characters in a sequence.\n    \"\"\"\n    return CharacterClass(rf\"/[{re.escape(''.join(character_sequence))}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.NamedCharacter","title":"<code>NamedCharacter</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>Creates a regex component that matches a named character.</p> <p>Regex: <code>\\N{...}</code></p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class NamedCharacter(RegexComponent):\n    r\"\"\"\n    Creates a regex component that matches a named character.\n\n    Regex: `\\N{...}`\n    \"\"\"\n\n    def __init__(self, name: str) -&gt; None:\n        self._regex = rf\"\\N{{{name}}}\"\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.PosixClass","title":"<code>PosixClass</code>","text":"<p>               Bases: <code>SupportsBracketExpression</code></p> <p>Creates a POSIX character class.</p> <p>Regex: <code>[[:...:]]</code></p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class PosixClass(SupportsBracketExpression):\n    \"\"\"\n    Creates a POSIX character class.\n\n    Regex: `[[:...:]]`\n    \"\"\"\n\n    def __init__(self, posix_class: str) -&gt; None:\n        self._regex = rf\"[[:{posix_class}:]]\"\n\n    def _get_regex_complement(self) -&gt; str:\n        return re.sub(\n            r\"(?&lt;=^\\[\\[:)(?|\\^|)\", lambda m: \"^\" if m.group() == \"\" else \"\", self._regex\n        )\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.SupportsBracketExpression","title":"<code>SupportsBracketExpression</code>","text":"<p>               Bases: <code>RegexComponent</code>, <code>Protocol</code></p> <p>A protocol for classes that support bracket expressions.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class SupportsBracketExpression(RegexComponent, Protocol):\n    \"\"\"\n    A protocol for classes that support bracket expressions.\n    \"\"\"\n\n    def _get_regex_complement(self) -&gt; str:\n        return re.sub(\n            r\"(?&lt;=^\\[)(?|\\^|)\", lambda m: \"^\" if m.group() == \"\" else \"\", self._regex\n        )\n\n    @property\n    def inverted(self) -&gt; \"SupportsBracketExpression\":\n        \"\"\"\n        A class that matches any character that does NOT match this character class.\n        \"\"\"\n        inverted_regex = self._get_regex_complement()\n        return CharacterClass(rf\"/{inverted_regex}/\")\n\n    def intersection(\n        self, other: \"SupportsBracketExpression\"\n    ) -&gt; \"SupportsBracketExpression\":\n        \"\"\"\n        Returns a class that is the intersection of `self` and `other`.\n        \"\"\"\n        return CharacterClass(rf\"/[{self.regex}&amp;&amp;{other.regex}]/\")\n\n    def subtracting(\n        self, other: \"SupportsBracketExpression\"\n    ) -&gt; \"SupportsBracketExpression\":\n        \"\"\"\n        Returns a class that is the result of subtracting `other` from `self`.\n        \"\"\"\n        return CharacterClass(rf\"/[{self.regex}--{other.regex}]/\")\n\n    def symmetric_difference(\n        self, other: \"SupportsBracketExpression\"\n    ) -&gt; \"SupportsBracketExpression\":\n        \"\"\"\n        Returns a class that is the symmetric difference of `self` and `other`.\n        \"\"\"\n        return CharacterClass(rf\"/[{self.regex}~~{other.regex}]/\")\n\n    def union(self, other: \"SupportsBracketExpression\") -&gt; \"SupportsBracketExpression\":\n        \"\"\"\n        Returns a class that is the union of `self` and `other`.\n        \"\"\"\n        return CharacterClass(rf\"/[{self.regex}||{other.regex}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.SupportsBracketExpression.inverted","title":"<code>inverted</code>  <code>property</code>","text":"<p>A class that matches any character that does NOT match this character class.</p>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.SupportsBracketExpression.intersection","title":"<code>intersection(other)</code>","text":"<p>Returns a class that is the intersection of <code>self</code> and <code>other</code>.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>def intersection(\n    self, other: \"SupportsBracketExpression\"\n) -&gt; \"SupportsBracketExpression\":\n    \"\"\"\n    Returns a class that is the intersection of `self` and `other`.\n    \"\"\"\n    return CharacterClass(rf\"/[{self.regex}&amp;&amp;{other.regex}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.SupportsBracketExpression.subtracting","title":"<code>subtracting(other)</code>","text":"<p>Returns a class that is the result of subtracting <code>other</code> from <code>self</code>.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>def subtracting(\n    self, other: \"SupportsBracketExpression\"\n) -&gt; \"SupportsBracketExpression\":\n    \"\"\"\n    Returns a class that is the result of subtracting `other` from `self`.\n    \"\"\"\n    return CharacterClass(rf\"/[{self.regex}--{other.regex}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.SupportsBracketExpression.symmetric_difference","title":"<code>symmetric_difference(other)</code>","text":"<p>Returns a class that is the symmetric difference of <code>self</code> and <code>other</code>.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>def symmetric_difference(\n    self, other: \"SupportsBracketExpression\"\n) -&gt; \"SupportsBracketExpression\":\n    \"\"\"\n    Returns a class that is the symmetric difference of `self` and `other`.\n    \"\"\"\n    return CharacterClass(rf\"/[{self.regex}~~{other.regex}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.SupportsBracketExpression.union","title":"<code>union(other)</code>","text":"<p>Returns a class that is the union of <code>self</code> and <code>other</code>.</p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>def union(self, other: \"SupportsBracketExpression\") -&gt; \"SupportsBracketExpression\":\n    \"\"\"\n    Returns a class that is the union of `self` and `other`.\n    \"\"\"\n    return CharacterClass(rf\"/[{self.regex}||{other.regex}]/\")\n</code></pre>"},{"location":"api-reference/character-classes/#pyregexbuilder.character_classes.UnicodeClass","title":"<code>UnicodeClass</code>","text":"<p>               Bases: <code>SupportsBracketExpression</code></p> <p>Creates a Unicode character class.</p> <p>Regex: <code>\\p{...}</code></p> Source code in <code>src/pyregexbuilder/character_classes.py</code> <pre><code>class UnicodeClass(SupportsBracketExpression):\n    r\"\"\"\n    Creates a Unicode character class.\n\n    Regex: `\\p{...}`\n    \"\"\"\n\n    @overload\n    def __init__(self, *, key: str, value: str) -&gt; None: ...\n\n    @overload\n    def __init__(self, value: str) -&gt; None: ...\n\n    def __init__(self, *args, **kwargs) -&gt; None:\n        if len(args) == 1:\n            self._regex = rf\"\\p{{{args[0]}}}\"\n        elif len(set([\"key\", \"value\"]).intersection(kwargs.keys())) == 2:\n            self._regex = rf\"\\p{{{kwargs[\"key\"]}={kwargs[\"value\"]}}}\"\n        else:\n            raise RegexBuilderException()\n\n    def _get_regex_complement(self) -&gt; str:\n        return re.sub(\n            r\"(?&lt;=^\\\\)[pP]\", lambda m: \"P\" if m.group() == \"p\" else \"p\", self._regex\n        )\n</code></pre>"},{"location":"api-reference/common/","title":"Common","text":""},{"location":"api-reference/common/#pyregexbuilder.common.ChoiceOf","title":"<code>ChoiceOf</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A regex component that matches any of the supplied regex components.</p> <p>Regex: <code>|</code></p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>class ChoiceOf(RegexComponent):\n    \"\"\"\n    A regex component that matches any of the supplied regex components.\n\n    Regex: `|`\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = (\n            rf\"(?:{'|'.join(self.parse(component) for component in components)})\"\n        )\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.Regex","title":"<code>Regex</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>The entry point for building a regular expression.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>class Regex(RegexComponent):\n    \"\"\"\n    The entry point for building a regular expression.\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = self.parse(*components)\n\n    def compile(self, *args, **kwargs):\n        return re.compile(self._regex, *args, **kwargs)\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexBuilderException","title":"<code>RegexBuilderException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>A general exception thrown when problems arise during the building of a regular expression.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>class RegexBuilderException(Exception):\n    \"\"\"\n    A general exception thrown when problems arise during the building of a regular expression.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexComponent","title":"<code>RegexComponent</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>A protocol for classes that can be used as components in the regex builder.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>class RegexComponent(Protocol):\n    \"\"\"\n    A protocol for classes that can be used as components in the regex builder.\n    \"\"\"\n\n    _regex: str\n\n    @property\n    def regex(self) -&gt; str:\n        \"\"\"\n        The string corresponding to the regular expression returned by a RegexComponent.\n        \"\"\"\n        return self._regex\n\n    def parse(self, *components: \"str | RegexComponent\") -&gt; str:\n        patterns = []\n\n        for component in components:\n            if isinstance(component, str):\n                if re.match(r\"^/.*/$\", component):\n                    patterns.append(component[1:-1])\n                else:\n                    patterns.append(re.escape(component))\n            else:\n                patterns.append(component.regex)\n\n        return \"\".join(patterns)\n\n    def with_flags(self, flags: RegexFlagsDict) -&gt; \"Regex\":\n        \"\"\"\n        Returns a copy of the `Regex` object with the corresponding scoped flags set.\n        \"\"\"\n        flags_shorthand = {\n            \"ASCII\": \"a\",\n            \"FULLCASE\": \"f\",\n            \"IGNORECASE\": \"i\",\n            \"LOCALE\": \"L\",\n            \"MULTILINE\": \"m\",\n            \"DOTALL\": \"s\",\n            \"UNICODE\": \"u\",\n            \"VERBOSE\": \"x\",\n            \"WORD\": \"w\",\n        }\n\n        flags_to_set = set(\n            flags_shorthand[flag] for flag in filter(lambda f: flags[f], flags)\n        )\n        flags_to_remove = set(\n            flags_shorthand[flag] for flag in filter(lambda f: not flags[f], flags)\n        )\n\n        return Regex(\n            rf\"/(?{''.join(flags_to_set)}\"\n            rf\"{\"-\"+''.join(flags_to_remove) if flags_to_remove else ''}\"\n            rf\":{self._regex})/\"\n        )\n\n    def with_global_flags(self, flags: RegexGlobalFlagsDict) -&gt; \"Regex\":\n        \"\"\"\n        Returns a copy of the `Regex` object with the corresponding global flags set.\n        \"\"\"\n        flags_shorthand = {\n            \"BESTMATCH\": \"b\",\n            \"ENHANCEMATCH\": \"e\",\n            \"POSIX\": \"p\",\n            \"REVERSE\": \"r\",\n            \"VERSION0\": \"V0\",\n            \"VERSION1\": \"V1\",\n        }\n\n        return Regex(\n            rf\"/(?{''.join(flags_shorthand[flag] for flag in flags)}){self._regex}/\"\n        )\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexComponent.regex","title":"<code>regex</code>  <code>property</code>","text":"<p>The string corresponding to the regular expression returned by a RegexComponent.</p>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexComponent.with_flags","title":"<code>with_flags(flags)</code>","text":"<p>Returns a copy of the <code>Regex</code> object with the corresponding scoped flags set.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>def with_flags(self, flags: RegexFlagsDict) -&gt; \"Regex\":\n    \"\"\"\n    Returns a copy of the `Regex` object with the corresponding scoped flags set.\n    \"\"\"\n    flags_shorthand = {\n        \"ASCII\": \"a\",\n        \"FULLCASE\": \"f\",\n        \"IGNORECASE\": \"i\",\n        \"LOCALE\": \"L\",\n        \"MULTILINE\": \"m\",\n        \"DOTALL\": \"s\",\n        \"UNICODE\": \"u\",\n        \"VERBOSE\": \"x\",\n        \"WORD\": \"w\",\n    }\n\n    flags_to_set = set(\n        flags_shorthand[flag] for flag in filter(lambda f: flags[f], flags)\n    )\n    flags_to_remove = set(\n        flags_shorthand[flag] for flag in filter(lambda f: not flags[f], flags)\n    )\n\n    return Regex(\n        rf\"/(?{''.join(flags_to_set)}\"\n        rf\"{\"-\"+''.join(flags_to_remove) if flags_to_remove else ''}\"\n        rf\":{self._regex})/\"\n    )\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexComponent.with_global_flags","title":"<code>with_global_flags(flags)</code>","text":"<p>Returns a copy of the <code>Regex</code> object with the corresponding global flags set.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>def with_global_flags(self, flags: RegexGlobalFlagsDict) -&gt; \"Regex\":\n    \"\"\"\n    Returns a copy of the `Regex` object with the corresponding global flags set.\n    \"\"\"\n    flags_shorthand = {\n        \"BESTMATCH\": \"b\",\n        \"ENHANCEMATCH\": \"e\",\n        \"POSIX\": \"p\",\n        \"REVERSE\": \"r\",\n        \"VERSION0\": \"V0\",\n        \"VERSION1\": \"V1\",\n    }\n\n    return Regex(\n        rf\"/(?{''.join(flags_shorthand[flag] for flag in flags)}){self._regex}/\"\n    )\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexFlagsDict","title":"<code>RegexFlagsDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>A mapping of scoped flags that can apply to only part of regular expression.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>class RegexFlagsDict(TypedDict, total=False):\n    \"\"\"\n    A mapping of scoped flags that can apply to only part of regular expression.\n    \"\"\"\n\n    ASCII: Literal[True]\n    FULLCASE: bool\n    IGNORECASE: bool\n    LOCALE: Literal[True]\n    MULTILINE: bool\n    DOTALL: bool\n    UNICODE: Literal[True]\n    VERBOSE: bool\n    WORD: bool\n</code></pre>"},{"location":"api-reference/common/#pyregexbuilder.common.RegexGlobalFlagsDict","title":"<code>RegexGlobalFlagsDict</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>A mapping of flags that apply to the entire regular expression.</p> Source code in <code>src/pyregexbuilder/common.py</code> <pre><code>class RegexGlobalFlagsDict(TypedDict, total=False):\n    \"\"\"\n    A mapping of flags that apply to the entire regular expression.\n    \"\"\"\n\n    BESTMATCH: Literal[True]\n    ENHANCEMATCH: Literal[True]\n    POSIX: Literal[True]\n    REVERSE: Literal[True]\n    VERSION0: Literal[True]\n    VERSION1: Literal[True]\n</code></pre>"},{"location":"api-reference/groups/","title":"Groups","text":""},{"location":"api-reference/groups/#pyregexbuilder.groups.Atomic","title":"<code>Atomic</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>An atomic group.</p> Source code in <code>src/pyregexbuilder/groups.py</code> <pre><code>class Atomic(RegexComponent):\n    \"\"\"\n    An atomic group.\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = rf\"(?&gt;{self.parse(*components)})\"\n</code></pre>"},{"location":"api-reference/groups/#pyregexbuilder.groups.BranchReset","title":"<code>BranchReset</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A branch reset group.</p> Source code in <code>src/pyregexbuilder/groups.py</code> <pre><code>class BranchReset(RegexComponent):\n    \"\"\"\n    A branch reset group.\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent) -&gt; None:\n        self._regex = rf\"(?|{'|'.join(self.parse(*components))})\"\n</code></pre>"},{"location":"api-reference/groups/#pyregexbuilder.groups.Capture","title":"<code>Capture</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A capture group. Can be named or unnamed.</p> <p>Regex: <code>(?P&lt;name&gt;...)</code> or <code>(...)</code></p> Source code in <code>src/pyregexbuilder/groups.py</code> <pre><code>class Capture(RegexComponent):\n    \"\"\"\n    A capture group. Can be named or unnamed.\n\n    Regex: `(?P&lt;name&gt;...)` or `(...)`\n    \"\"\"\n\n    def __init__(self, *components: str | RegexComponent, name: str | None = None):\n        if name:\n            self._regex = rf\"(?P&lt;{name}&gt;{self.parse(*components)})\"\n        else:\n            self._regex = rf\"({self.parse(*components)})\"\n</code></pre>"},{"location":"api-reference/groups/#pyregexbuilder.groups.Reference","title":"<code>Reference</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A named or numbered reference to a previously captured group.</p> <p>Regex: <code>\\g&lt;...&gt;</code></p> Source code in <code>src/pyregexbuilder/groups.py</code> <pre><code>class Reference(RegexComponent):\n    r\"\"\"\n    A named or numbered reference to a previously captured group.\n\n    Regex: `\\g&lt;...&gt;`\n    \"\"\"\n\n    def __init__(self, ref: str | int) -&gt; None:\n        self._regex = rf\"\\g&lt;{ref}&gt;\"\n</code></pre>"},{"location":"api-reference/quantifiers/","title":"Quantifiers","text":""},{"location":"api-reference/quantifiers/#pyregexbuilder.quantifiers.OneOrMore","title":"<code>OneOrMore</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A regex component that matches one or more occurrences of the supplied regex components.</p> Source code in <code>src/pyregexbuilder/quantifiers.py</code> <pre><code>class OneOrMore(RegexComponent):\n    \"\"\"\n    A regex component that matches one or more occurrences of the supplied regex components.\n    \"\"\"\n\n    def __init__(\n        self, *components: str | RegexComponent, greed: Greed = Greed.GREEDY\n    ) -&gt; None:\n        self._regex = rf\"(?:{self.parse(*components)})+{greed.value}\"\n</code></pre>"},{"location":"api-reference/quantifiers/#pyregexbuilder.quantifiers.Optionally","title":"<code>Optionally</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A regex component that matches zero or one occurrences of the supplied regex components.</p> Source code in <code>src/pyregexbuilder/quantifiers.py</code> <pre><code>class Optionally(RegexComponent):\n    \"\"\"\n    A regex component that matches zero or one occurrences of the supplied regex components.\n    \"\"\"\n\n    def __init__(\n        self, *components: str | RegexComponent, greed: Greed = Greed.GREEDY\n    ) -&gt; None:\n        self._regex = rf\"(?:{self.parse(*components)})?{greed.value}\"\n</code></pre>"},{"location":"api-reference/quantifiers/#pyregexbuilder.quantifiers.Repeat","title":"<code>Repeat</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A regex component that matches the specified number of occurrences of the supplied regex components.</p> Source code in <code>src/pyregexbuilder/quantifiers.py</code> <pre><code>class Repeat(RegexComponent):\n    \"\"\"\n    A regex component that matches the specified number of occurrences of the supplied regex components.\n    \"\"\"\n\n    def __init__(\n        self,\n        *components: str | RegexComponent,\n        count: int | None = None,\n        minimum: int | None = None,\n        maximum: int | None = None,\n        greed: Greed = Greed.GREEDY,\n    ) -&gt; None:\n        if (count and (minimum or maximum)) or not (any((count, minimum, maximum))):\n            raise RegexBuilderException(\n                \"Must specify either `count` OR `minimum` and/or `maximum`.\"\n            )\n\n        if count:\n            self._regex = rf\"(?:{self.parse(*components)}{{{count}}})\"\n        else:\n            m = minimum if minimum else \"\"\n            n = maximum if maximum else \"\"\n            self._regex = rf\"(?:{self.parse(*components)}){{{m},{n}}}{greed.value}\"\n</code></pre>"},{"location":"api-reference/quantifiers/#pyregexbuilder.quantifiers.ZeroOrMore","title":"<code>ZeroOrMore</code>","text":"<p>               Bases: <code>RegexComponent</code></p> <p>A regex component that matches zero or more occurrences of the supplied regex components.</p> Source code in <code>src/pyregexbuilder/quantifiers.py</code> <pre><code>class ZeroOrMore(RegexComponent):\n    \"\"\"\n    A regex component that matches zero or more occurrences of the supplied regex components.\n    \"\"\"\n\n    def __init__(\n        self, *components: str | RegexComponent, greed: Greed = Greed.GREEDY\n    ) -&gt; None:\n        self._regex = rf\"(?:{self.parse(*components)})*{greed.value}\"\n</code></pre>"}]}